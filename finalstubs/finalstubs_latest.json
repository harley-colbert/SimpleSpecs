[
  {
    "file_path": "backend/config.py",
    "language": "python",
    "description": "Settings include PDF engine toggle (native|mineru|auto).",
    "imported_types": [
      "pydantic.BaseSettings"
    ],
    "declared_types": [
      {
        "name": "Settings",
        "type": "class",
        "line": 1,
        "docstring": "Runtime settings loaded from env.",
        "modifiers": [],
        "decorators": [],
        "extends": [],
        "args": [],
        "returns": null,
        "members": [],
        "properties": [
          {
            "name": "OPENROUTER_API_KEY",
            "type": "str",
            "default": "${OPENROUTER_API_KEY}"
          },
          {
            "name": "LLAMACPP_URL",
            "type": "str",
            "default": "http://localhost:8080"
          },
          {
            "name": "DB_URL",
            "type": "str",
            "default": "sqlite:///./simplespecs.db"
          },
          {
            "name": "ARTIFACTS_DIR",
            "type": "str",
            "default": "artifacts"
          },
          {
            "name": "ALLOW_ORIGINS",
            "type": "list[str]",
            "default": "*"
          },
          {
            "name": "MAX_FILE_MB",
            "type": "int",
            "default": 50
          },
          {
            "name": "PDF_ENGINE",
            "type": "str",
            "default": "'native' | 'mineru' | 'auto'"
          },
          {
            "name": "MINERU_ENABLED",
            "type": "bool",
            "default": false
          },
          {
            "name": "MINERU_MODEL_OPTS",
            "type": "dict",
            "default": "{}"
          }
        ]
      }
    ]
  },
  {
    "file_path": "backend/models.py",
    "language": "python",
    "description": "Pydantic schemas for API.",
    "imported_types": [
      "pydantic.BaseModel",
      "typing.Literal",
      "typing.Optional",
      "typing.List"
    ],
    "declared_types": [
      {
        "name": "ParsedObject",
        "type": "class",
        "line": 1,
        "docstring": "One extracted text/table/image object.",
        "modifiers": [],
        "decorators": [],
        "extends": [],
        "args": [],
        "returns": null,
        "members": [],
        "properties": [
          {
            "name": "object_id",
            "type": "str"
          },
          {
            "name": "file_id",
            "type": "str"
          },
          {
            "name": "kind",
            "type": "Literal['text','table','image']"
          },
          {
            "name": "text",
            "type": "Optional[str]"
          },
          {
            "name": "page_index",
            "type": "Optional[int]"
          },
          {
            "name": "bbox",
            "type": "Optional[tuple[float,float,float,float]]"
          },
          {
            "name": "order_index",
            "type": "int"
          },
          {
            "name": "metadata",
            "type": "dict"
          }
        ]
      },
      {
        "name": "SectionNode",
        "type": "class",
        "line": 1,
        "docstring": "Header tree node.",
        "modifiers": [],
        "decorators": [],
        "extends": [],
        "args": [],
        "returns": null,
        "members": [],
        "properties": [
          {
            "name": "section_id",
            "type": "str"
          },
          {
            "name": "file_id",
            "type": "str"
          },
          {
            "name": "number",
            "type": "Optional[str]"
          },
          {
            "name": "title",
            "type": "str"
          },
          {
            "name": "depth",
            "type": "int"
          },
          {
            "name": "children",
            "type": "list[SectionNode]"
          },
          {
            "name": "span",
            "type": "dict"
          }
        ]
      },
      {
        "name": "SpecItem",
        "type": "class",
        "line": 1,
        "docstring": "Mechanical spec with provenance.",
        "modifiers": [],
        "decorators": [],
        "extends": [],
        "args": [],
        "returns": null,
        "members": [],
        "properties": [
          {
            "name": "spec_id",
            "type": "str"
          },
          {
            "name": "file_id",
            "type": "str"
          },
          {
            "name": "section_id",
            "type": "str"
          },
          {
            "name": "section_number",
            "type": "Optional[str]"
          },
          {
            "name": "section_title",
            "type": "str"
          },
          {
            "name": "spec_text",
            "type": "str"
          },
          {
            "name": "confidence",
            "type": "Optional[float]"
          },
          {
            "name": "source_object_ids",
            "type": "list[str]"
          }
        ]
      }
    ]
  },
  {
    "file_path": "backend/store.py",
    "language": "python",
    "description": "SQLite persistence via SQLModel.",
    "imported_types": [
      "sqlmodel.SQLModel",
      "sqlmodel.Field",
      "sqlmodel.create_engine",
      "sqlmodel.Session"
    ],
    "declared_types": [
      {
        "name": "DBParsedObject",
        "type": "class",
        "line": 1,
        "docstring": "SQLModel table for ParsedObject",
        "modifiers": [],
        "decorators": [],
        "extends": [],
        "args": [],
        "returns": null,
        "members": [],
        "properties": []
      },
      {
        "name": "DBSectionNode",
        "type": "class",
        "line": 1,
        "docstring": "SQLModel table for SectionNode",
        "modifiers": [],
        "decorators": [],
        "extends": [],
        "args": [],
        "returns": null,
        "members": [],
        "properties": []
      },
      {
        "name": "DBSpecItem",
        "type": "class",
        "line": 1,
        "docstring": "SQLModel table for SpecItem",
        "modifiers": [],
        "decorators": [],
        "extends": [],
        "args": [],
        "returns": null,
        "members": [],
        "properties": []
      },
      {
        "name": "get_session",
        "type": "function",
        "line": 1,
        "docstring": "Yield a database session",
        "modifiers": [],
        "decorators": [],
        "extends": [],
        "args": [],
        "returns": "Session",
        "members": [],
        "properties": []
      }
    ]
  },
  {
    "file_path": "backend/logging.py",
    "language": "python",
    "description": "Central logging config.",
    "imported_types": [
      "logging",
      "sys"
    ],
    "declared_types": [
      {
        "name": "setup_logging",
        "type": "function",
        "line": 1,
        "docstring": "Configure loggers/handlers.",
        "modifiers": [],
        "decorators": [],
        "extends": [],
        "args": [],
        "returns": "None",
        "members": [],
        "properties": []
      }
    ]
  },
  {
    "file_path": "backend/main.py",
    "language": "python",
    "description": "App factory; include routers; lifespan.",
    "imported_types": [
      "fastapi.FastAPI",
      "routers.ingest",
      "routers.headers",
      "routers.specs",
      "routers.files",
      "routers.system",
      "config.Settings"
    ],
    "declared_types": [
      {
        "name": "create_app",
        "type": "function",
        "line": 1,
        "docstring": "Create and configure FastAPI app.",
        "modifiers": [],
        "decorators": [],
        "extends": [],
        "args": [
          {
            "name": "settings",
            "type": "Settings",
            "default": null
          }
        ],
        "returns": "FastAPI",
        "members": [],
        "properties": []
      }
    ]
  },
  {
    "file_path": "backend/routers/ingest.py",
    "language": "python",
    "description": "ingest routes.",
    "imported_types": [
      "fastapi.APIRouter",
      "models",
      "store",
      "services"
    ],
    "declared_types": [
      {
        "name": "ingest_router",
        "type": "variable",
        "line": 1,
        "docstring": "APIRouter for this domain.",
        "modifiers": [],
        "decorators": [],
        "extends": [],
        "args": [],
        "returns": null,
        "members": [],
        "properties": []
      }
    ]
  },
  {
    "file_path": "backend/routers/headers.py",
    "language": "python",
    "description": "headers routes.",
    "imported_types": [
      "fastapi.APIRouter",
      "models",
      "store",
      "services"
    ],
    "declared_types": [
      {
        "name": "headers_router",
        "type": "variable",
        "line": 1,
        "docstring": "APIRouter for this domain.",
        "modifiers": [],
        "decorators": [],
        "extends": [],
        "args": [],
        "returns": null,
        "members": [],
        "properties": []
      }
    ]
  },
  {
    "file_path": "backend/routers/specs.py",
    "language": "python",
    "description": "specs routes.",
    "imported_types": [
      "fastapi.APIRouter",
      "models",
      "store",
      "services"
    ],
    "declared_types": [
      {
        "name": "specs_router",
        "type": "variable",
        "line": 1,
        "docstring": "APIRouter for this domain.",
        "modifiers": [],
        "decorators": [],
        "extends": [],
        "args": [],
        "returns": null,
        "members": [],
        "properties": []
      }
    ]
  },
  {
    "file_path": "backend/routers/files.py",
    "language": "python",
    "description": "files routes.",
    "imported_types": [
      "fastapi.APIRouter",
      "models",
      "store",
      "services"
    ],
    "declared_types": [
      {
        "name": "files_router",
        "type": "variable",
        "line": 1,
        "docstring": "APIRouter for this domain.",
        "modifiers": [],
        "decorators": [],
        "extends": [],
        "args": [],
        "returns": null,
        "members": [],
        "properties": []
      }
    ]
  },
  {
    "file_path": "backend/routers/system.py",
    "language": "python",
    "description": "system routes.",
    "imported_types": [
      "fastapi.APIRouter",
      "models",
      "store",
      "services"
    ],
    "declared_types": [
      {
        "name": "system_router",
        "type": "variable",
        "line": 1,
        "docstring": "APIRouter for this domain.",
        "modifiers": [],
        "decorators": [],
        "extends": [],
        "args": [],
        "returns": null,
        "members": [],
        "properties": []
      }
    ]
  },
  {
    "file_path": "backend/services/llm_client.py",
    "language": "python",
    "description": "LLM client adapters.",
    "imported_types": [
      "typing.Protocol"
    ],
    "declared_types": [
      {
        "name": "LLMAdapter",
        "type": "protocol",
        "line": 1,
        "docstring": "complete(prompt, model, temperature, max_tokens)->str",
        "modifiers": [],
        "decorators": [],
        "extends": [],
        "args": [],
        "returns": null,
        "members": [
          {
            "name": "complete",
            "type": "function",
            "line": 1,
            "docstring": "Run completion.",
            "modifiers": [],
            "decorators": [],
            "extends": [],
            "args": [
              {
                "name": "prompt",
                "type": "str"
              },
              {
                "name": "model",
                "type": "str"
              },
              {
                "name": "temperature",
                "type": "float"
              },
              {
                "name": "max_tokens",
                "type": "int"
              }
            ],
            "returns": "str",
            "members": [],
            "properties": []
          }
        ],
        "properties": []
      },
      {
        "name": "OpenRouterAdapter",
        "type": "class",
        "line": 1,
        "docstring": "Calls OpenRouter HTTP API.",
        "modifiers": [],
        "decorators": [],
        "extends": [],
        "args": [],
        "returns": null,
        "members": [],
        "properties": []
      },
      {
        "name": "LlamaCppAdapter",
        "type": "class",
        "line": 1,
        "docstring": "Calls llama.cpp HTTP server.",
        "modifiers": [],
        "decorators": [],
        "extends": [],
        "args": [],
        "returns": null,
        "members": [],
        "properties": []
      }
    ]
  },
  {
    "file_path": "backend/services/pdf_parser.py",
    "language": "python",
    "description": "Engine-agnostic PDF parser interface and selector.",
    "imported_types": [
      "typing.Protocol",
      "models.ParsedObject"
    ],
    "declared_types": [
      {
        "name": "PdfParser",
        "type": "protocol",
        "line": 1,
        "docstring": "parse_pdf(file_path)->list[ParsedObject]",
        "modifiers": [],
        "decorators": [],
        "extends": [],
        "args": [],
        "returns": null,
        "members": [
          {
            "name": "parse_pdf",
            "type": "function",
            "line": 1,
            "docstring": "Parse a PDF into ParsedObject[]",
            "modifiers": [],
            "decorators": [],
            "extends": [],
            "args": [
              {
                "name": "file_path",
                "type": "str"
              }
            ],
            "returns": "list[ParsedObject]",
            "members": [],
            "properties": []
          }
        ],
        "properties": []
      },
      {
        "name": "select_pdf_parser",
        "type": "function",
        "line": 1,
        "docstring": "Return parser instance based on Settings and heuristics.",
        "modifiers": [],
        "decorators": [],
        "extends": [],
        "args": [
          {
            "name": "settings",
            "type": "Settings"
          },
          {
            "name": "file_path",
            "type": "str"
          }
        ],
        "returns": "PdfParser",
        "members": [],
        "properties": []
      }
    ]
  },
  {
    "file_path": "backend/services/pdf_native.py",
    "language": "python",
    "description": "Native PDF extraction pipeline.",
    "imported_types": [
      "pdfplumber",
      "pymupdf",
      "pikepdf",
      "typing.List",
      "models.ParsedObject"
    ],
    "declared_types": [
      {
        "name": "NativePdfParser",
        "type": "class",
        "line": 1,
        "docstring": "Implements PdfParser using pdfplumber/PyMuPDF/pikepdf and Camelot/Tabula.",
        "modifiers": [],
        "decorators": [],
        "extends": [],
        "args": [],
        "returns": null,
        "members": [],
        "properties": []
      }
    ]
  },
  {
    "file_path": "backend/services/pdf_mineru.py",
    "language": "python",
    "description": "MinerU-backed PDF extraction pipeline.",
    "imported_types": [
      "typing.List",
      "models.ParsedObject"
    ],
    "declared_types": [
      {
        "name": "MinerUPdfParser",
        "type": "class",
        "line": 1,
        "docstring": "Implements PdfParser using MinerU (magic-pdf) and normalizes to ParsedObject.",
        "modifiers": [],
        "decorators": [],
        "extends": [],
        "args": [],
        "returns": null,
        "members": [],
        "properties": []
      }
    ]
  },
  {
    "file_path": "backend/services/parse_docx.py",
    "language": "python",
    "description": "DOCX extractor.",
    "imported_types": [
      "docx",
      "typing.List",
      "models.ParsedObject"
    ],
    "declared_types": [
      {
        "name": "parse_docx",
        "type": "function",
        "line": 1,
        "docstring": "Extract paragraphs/tables/runs with styles.",
        "modifiers": [],
        "decorators": [],
        "extends": [],
        "args": [
          {
            "name": "file_path",
            "type": "str"
          }
        ],
        "returns": "list[ParsedObject]",
        "members": [],
        "properties": []
      }
    ]
  },
  {
    "file_path": "backend/services/parse_txt.py",
    "language": "python",
    "description": "TXT extractor.",
    "imported_types": [
      "typing.List",
      "models.ParsedObject"
    ],
    "declared_types": [
      {
        "name": "parse_txt",
        "type": "function",
        "line": 1,
        "docstring": "Line-by-line TXT extraction with encoding detection.",
        "modifiers": [],
        "decorators": [],
        "extends": [],
        "args": [
          {
            "name": "file_path",
            "type": "str"
          }
        ],
        "returns": "list[ParsedObject]",
        "members": [],
        "properties": []
      }
    ]
  },
  {
    "file_path": "backend/services/headers.py",
    "language": "python",
    "description": "Header discovery.",
    "imported_types": [
      "typing.List",
      "models.SectionNode",
      "models.ParsedObject",
      "services.llm_client.LLMAdapter"
    ],
    "declared_types": [
      {
        "name": "build_headers_prompt",
        "type": "function",
        "line": 1,
        "docstring": "Create headers prompt from doc text.",
        "modifiers": [],
        "decorators": [],
        "extends": [],
        "args": [
          {
            "name": "objects",
            "type": "list[ParsedObject]"
          }
        ],
        "returns": "str",
        "members": [],
        "properties": []
      },
      {
        "name": "parse_nested_list_to_tree",
        "type": "function",
        "line": 1,
        "docstring": "Convert nested list to SectionNode tree.",
        "modifiers": [],
        "decorators": [],
        "extends": [],
        "args": [
          {
            "name": "file_id",
            "type": "str"
          },
          {
            "name": "nested_list_text",
            "type": "str"
          }
        ],
        "returns": "SectionNode",
        "members": [],
        "properties": []
      }
    ]
  },
  {
    "file_path": "backend/services/chunker.py",
    "language": "python",
    "description": "Granular chunking and parent aggregation.",
    "imported_types": [
      "typing.Dict",
      "typing.List",
      "models.SectionNode",
      "models.ParsedObject"
    ],
    "declared_types": [
      {
        "name": "compute_section_spans",
        "type": "function",
        "line": 1,
        "docstring": "Map sections to object spans.",
        "modifiers": [],
        "decorators": [],
        "extends": [],
        "args": [
          {
            "name": "root",
            "type": "SectionNode"
          },
          {
            "name": "objects",
            "type": "list[ParsedObject]"
          }
        ],
        "returns": "dict[str,list[str]]",
        "members": [],
        "properties": []
      }
    ]
  },
  {
    "file_path": "backend/services/specs.py",
    "language": "python",
    "description": "Spec extraction loop.",
    "imported_types": [
      "typing.List",
      "models.SpecItem",
      "models.SectionNode",
      "models.ParsedObject",
      "services.llm_client.LLMAdapter"
    ],
    "declared_types": [
      {
        "name": "build_specs_prompt",
        "type": "function",
        "line": 1,
        "docstring": "Construct per-section spec prompt.",
        "modifiers": [],
        "decorators": [],
        "extends": [],
        "args": [
          {
            "name": "section",
            "type": "SectionNode"
          },
          {
            "name": "text",
            "type": "str"
          }
        ],
        "returns": "str",
        "members": [],
        "properties": []
      },
      {
        "name": "extract_specs_for_sections",
        "type": "function",
        "line": 1,
        "docstring": "Iterate leaves, call LLM, normalize/dedup.",
        "modifiers": [],
        "decorators": [],
        "extends": [],
        "args": [
          {
            "name": "file_id",
            "type": "str"
          },
          {
            "name": "root",
            "type": "SectionNode"
          },
          {
            "name": "objects",
            "type": "list[ParsedObject]"
          },
          {
            "name": "adapter",
            "type": "LLMAdapter"
          }
        ],
        "returns": "list[SpecItem]",
        "members": [],
        "properties": []
      }
    ]
  },
  {
    "file_path": "frontend/index.html",
    "language": "html",
    "description": "Upload \u2192 Find headers \u2192 Build sections \u2192 Find specs.",
    "imported_types": [],
    "declared_types": []
  },
  {
    "file_path": "frontend/styles.css",
    "language": "css",
    "description": "Clean, minimal styles.",
    "imported_types": [],
    "declared_types": []
  },
  {
    "file_path": "frontend/js/api.js",
    "language": "javascript",
    "description": "ESM API",
    "imported_types": [],
    "declared_types": [
      {
        "name": "api",
        "type": "namespace",
        "line": 1,
        "docstring": "Fetch wrappers for backend routes.",
        "modifiers": [],
        "decorators": [],
        "extends": [],
        "args": [],
        "returns": null,
        "members": [],
        "properties": []
      }
    ]
  },
  {
    "file_path": "frontend/js/state.js",
    "language": "javascript",
    "description": "App state incl. engine selection.",
    "imported_types": [],
    "declared_types": [
      {
        "name": "AppState",
        "type": "class",
        "line": 1,
        "docstring": "Tracks file, parsedObjects, sections, specs, and selected PDF engine.",
        "modifiers": [],
        "decorators": [],
        "extends": [],
        "args": [],
        "returns": null,
        "members": [],
        "properties": []
      }
    ]
  },
  {
    "file_path": "frontend/js/ui-upload.js",
    "language": "javascript",
    "description": "Upload UI with engine toggle.",
    "imported_types": [],
    "declared_types": [
      {
        "name": "initUpload",
        "type": "function",
        "line": 1,
        "docstring": "Wire upload input and /ingest; show engine toggle.",
        "modifiers": [],
        "decorators": [],
        "extends": [],
        "args": [],
        "returns": null,
        "members": [],
        "properties": []
      }
    ]
  },
  {
    "file_path": "frontend/js/ui-sections.js",
    "language": "javascript",
    "description": "Sections UI",
    "imported_types": [],
    "declared_types": [
      {
        "name": "initSections",
        "type": "function",
        "line": 1,
        "docstring": "Render header tree and previews.",
        "modifiers": [],
        "decorators": [],
        "extends": [],
        "args": [],
        "returns": null,
        "members": [],
        "properties": []
      }
    ]
  },
  {
    "file_path": "frontend/js/ui-specs.js",
    "language": "javascript",
    "description": "Specs UI",
    "imported_types": [],
    "declared_types": [
      {
        "name": "initSpecs",
        "type": "function",
        "line": 1,
        "docstring": "Run spec loop and render final table.",
        "modifiers": [],
        "decorators": [],
        "extends": [],
        "args": [],
        "returns": null,
        "members": [],
        "properties": []
      }
    ]
  },
  {
    "file_path": "run.py",
    "language": "python",
    "description": "Launch backend + serve frontend.",
    "imported_types": [],
    "declared_types": [
      {
        "name": "main",
        "type": "function",
        "line": 1,
        "docstring": "Start backend & static frontend servers.",
        "modifiers": [],
        "decorators": [],
        "extends": [],
        "args": [],
        "returns": "int",
        "members": [],
        "properties": []
      }
    ]
  },
  {
    "file_path": "run_local.py",
    "language": "python",
    "description": "Local dev runner.",
    "imported_types": [],
    "declared_types": [
      {
        "name": "main",
        "type": "function",
        "line": 1,
        "docstring": "Run backend only (dev).",
        "modifiers": [],
        "decorators": [],
        "extends": [],
        "args": [],
        "returns": "int",
        "members": [],
        "properties": []
      }
    ]
  },
  {
    "file_path": "README.md",
    "language": "markdown",
    "description": "Setup, run, and engine toggle usage.",
    "imported_types": [],
    "declared_types": []
  },
  {
    "file_path": "fixtures/README.md",
    "language": "markdown",
    "description": "Place sample PDFs/DOCX/TXT here.",
    "imported_types": [],
    "declared_types": []
  },
  {
    "file_path": "backend/tests/test_contracts.py",
    "language": "python",
    "description": "",
    "imported_types": [],
    "declared_types": [
      {
        "name": "test_models_schema",
        "type": "function",
        "line": 1,
        "docstring": "Validate models schemas.",
        "modifiers": [],
        "decorators": [],
        "extends": [],
        "args": [],
        "returns": null,
        "members": [],
        "properties": []
      }
    ]
  },
  {
    "file_path": "backend/tests/test_routes_mock.py",
    "language": "python",
    "description": "",
    "imported_types": [],
    "declared_types": [
      {
        "name": "test_routes_mock",
        "type": "function",
        "line": 1,
        "docstring": "Mock endpoints respond 200.",
        "modifiers": [],
        "decorators": [],
        "extends": [],
        "args": [],
        "returns": null,
        "members": [],
        "properties": []
      }
    ]
  },
  {
    "file_path": "backend/tests/test_parse_pdf_native.py",
    "language": "python",
    "description": "",
    "imported_types": [],
    "declared_types": [
      {
        "name": "test_pdf_native_golden",
        "type": "function",
        "line": 1,
        "docstring": "Verify native parser against goldens.",
        "modifiers": [],
        "decorators": [],
        "extends": [],
        "args": [],
        "returns": null,
        "members": [],
        "properties": []
      }
    ]
  },
  {
    "file_path": "backend/tests/test_parse_pdf_mineru.py",
    "language": "python",
    "description": "",
    "imported_types": [],
    "declared_types": [
      {
        "name": "test_pdf_mineru_golden",
        "type": "function",
        "line": 1,
        "docstring": "Verify MinerU parser against goldens.",
        "modifiers": [],
        "decorators": [],
        "extends": [],
        "args": [],
        "returns": null,
        "members": [],
        "properties": []
      }
    ]
  },
  {
    "file_path": "backend/tests/test_pdf_parity.py",
    "language": "python",
    "description": "",
    "imported_types": [],
    "declared_types": [
      {
        "name": "test_native_vs_mineru_parity",
        "type": "function",
        "line": 1,
        "docstring": "Compare coverage metrics between engines with tolerance.",
        "modifiers": [],
        "decorators": [],
        "extends": [],
        "args": [],
        "returns": null,
        "members": [],
        "properties": []
      }
    ]
  },
  {
    "file_path": "backend/tests/test_parse_docx.py",
    "language": "python",
    "description": "",
    "imported_types": [],
    "declared_types": [
      {
        "name": "test_parse_docx_golden",
        "type": "function",
        "line": 1,
        "docstring": "DOCX extraction goldens.",
        "modifiers": [],
        "decorators": [],
        "extends": [],
        "args": [],
        "returns": null,
        "members": [],
        "properties": []
      }
    ]
  },
  {
    "file_path": "backend/tests/test_parse_txt.py",
    "language": "python",
    "description": "",
    "imported_types": [],
    "declared_types": [
      {
        "name": "test_parse_txt_golden",
        "type": "function",
        "line": 1,
        "docstring": "TXT extraction goldens.",
        "modifiers": [],
        "decorators": [],
        "extends": [],
        "args": [],
        "returns": null,
        "members": [],
        "properties": []
      }
    ]
  },
  {
    "file_path": "backend/tests/test_headers_parse.py",
    "language": "python",
    "description": "",
    "imported_types": [],
    "declared_types": [
      {
        "name": "test_nested_list_parse_variants",
        "type": "function",
        "line": 1,
        "docstring": "Robust list\u2192tree parsing.",
        "modifiers": [],
        "decorators": [],
        "extends": [],
        "args": [],
        "returns": null,
        "members": [],
        "properties": []
      }
    ]
  },
  {
    "file_path": "backend/tests/test_chunker.py",
    "language": "python",
    "description": "",
    "imported_types": [],
    "declared_types": [
      {
        "name": "test_compute_section_spans",
        "type": "function",
        "line": 1,
        "docstring": "Section span mapping validation.",
        "modifiers": [],
        "decorators": [],
        "extends": [],
        "args": [],
        "returns": null,
        "members": [],
        "properties": []
      }
    ]
  },
  {
    "file_path": "backend/tests/test_parent_aggregation.py",
    "language": "python",
    "description": "",
    "imported_types": [],
    "declared_types": [
      {
        "name": "test_parent_equals_union",
        "type": "function",
        "line": 1,
        "docstring": "Parent text is union of children.",
        "modifiers": [],
        "decorators": [],
        "extends": [],
        "args": [],
        "returns": null,
        "members": [],
        "properties": []
      }
    ]
  },
  {
    "file_path": "backend/tests/test_specs_merge.py",
    "language": "python",
    "description": "",
    "imported_types": [],
    "declared_types": [
      {
        "name": "test_dedup_and_merge",
        "type": "function",
        "line": 1,
        "docstring": "Deduplicate specs across sections.",
        "modifiers": [],
        "decorators": [],
        "extends": [],
        "args": [],
        "returns": null,
        "members": [],
        "properties": []
      }
    ]
  },
  {
    "file_path": "backend/tests/test_specs_loop_resume.py",
    "language": "python",
    "description": "",
    "imported_types": [],
    "declared_types": [
      {
        "name": "test_resume_on_failure",
        "type": "function",
        "line": 1,
        "docstring": "Resume after simulated failures.",
        "modifiers": [],
        "decorators": [],
        "extends": [],
        "args": [],
        "returns": null,
        "members": [],
        "properties": []
      }
    ]
  },
  {
    "file_path": "backend/tests/test_export_csv_json.py",
    "language": "python",
    "description": "",
    "imported_types": [],
    "declared_types": [
      {
        "name": "test_export_formats",
        "type": "function",
        "line": 1,
        "docstring": "CSV/JSON schema correctness.",
        "modifiers": [],
        "decorators": [],
        "extends": [],
        "args": [],
        "returns": null,
        "members": [],
        "properties": []
      }
    ]
  },
  {
    "file_path": "backend/tests/test_upload_limits.py",
    "language": "python",
    "description": "",
    "imported_types": [],
    "declared_types": [
      {
        "name": "test_limits",
        "type": "function",
        "line": 1,
        "docstring": "File size/type validation.",
        "modifiers": [],
        "decorators": [],
        "extends": [],
        "args": [],
        "returns": null,
        "members": [],
        "properties": []
      }
    ]
  },
  {
    "file_path": "backend/tests/test_system_capabilities.py",
    "language": "python",
    "description": "",
    "imported_types": [],
    "declared_types": [
      {
        "name": "test_capabilities_endpoint",
        "type": "function",
        "line": 1,
        "docstring": "Detect optional tools and MinerU availability.",
        "modifiers": [],
        "decorators": [],
        "extends": [],
        "args": [],
        "returns": null,
        "members": [],
        "properties": []
      }
    ]
  }
]